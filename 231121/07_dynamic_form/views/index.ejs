<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Form</title>
    <!-- jQuery CDN -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <!-- axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <style>
        div.result {
            font-size: 24px;
            font-weight: 70px;
        }
    </style>
</head>
<body>
    <h1>동적 폼 전송 연습하기!</h1>

    <!-- 이름, 성별(라디오버튼) 을 입력받는 폼 -->
    <form action="" name="register">
        <label for="name">이름</label>
        <input type="text" name="name2" id="name" required>
        <br>

        성별
        <input type="radio" name="gender" id="male" value="m" required>
        <label for="male">남</label>
        <input type="radio" name="gender" id="female" value="f">
        <label for="female">여</label>

        <!-- Get / Post -->
        <button type="button" onclick="ajaxGet()">Ajax Get 제출</button>
        <button type="button" onclick="ajaxPost()">Ajax Post 제출</button>
        <br>

        <!-- Axios -->
        <button type="button" onclick="axiosGet()">Axios Get 제출</button>
        <button type="button" onclick="axiosPost()">Axios Post 제출</button>
        <!-- <button type="button" onclick="exec()">Axios Get 제출</button> -->

        <!-- Fetch -->
        <button type="button" onclick="fetchGet()">fetchGet 제출</button>
        <button type="button" onclick="fetchPost()">fetchPost 제출</button>


        <!-- 동적 폼 전송 결과를 보여줄 곳 -->
        <div class="result"></div>
    </form>

    <script>
        // result 박스 선택
        const resultBox = document.querySelector('.result');

        // Get
        function ajaxGet() {
            // 폼 선택 (해서 가져올 것))
            const form = document.forms['register'];

            // 폼 요소 확인
            console.log(form);
            console.log(form.name);     // id로 요소 가져온 것
            console.log(form.name2);    // name으로 요소 가져온 것
            console.log(form.gender);

            // 폼 요소 value 값.
            const data = {
                name: form.name.value,
                gender: form.gender.value   // gender라는 키 값으로 폼에 있는 젠더의 밸류를 넣어준다.
            }
            console.log('data >', data);

            // Ajax로 서버에 Get 요청 보내기.
            $.ajax({
                // 보내는 옵션을 넣어준다.
                type: 'get',        // 요청의 종류 (=form의 method 속성)
                url: '/ajax',       // 요청의 경로 (=form의 action 속성)
                data: data,         // 요청에 보낼 데이터 (서버가 받게 될 값))      // 내가 만든 내용
                success: function(data) {
                    // 요청이 성공적으로 수행되었을 때 실행할 함수.
                    console.log(data);
                    // 받아온 data 값을 위에서 만든 (동적 폼 전송 결과 박스) result 값에 넣어주기.
                    resultBox.textContent = `Get /ajax 요청 완료! ${data.name} 님의 성별은 ${data.gender}!`;
                }
            })
        }
        // Post
        function ajaxPost() {
            const form = document.forms['register'];
            // 서버로 보낼 데이터
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            $.ajax({
                type: 'post',
                url: '/ajax',
                data: data,
                success: function(data) {
                    // 요청이 성공적으로 수행되었을 때 실행할 함수.
                    console.log(data);
                    // 받아온 data 값을 위에서 만든 (동적 폼 전송 결과 박스) result 값에 넣어주기.
                    resultBox.textContent = `Post /ajax 요청 완료! ${data.name} 님의 성별은 ${data.gender}!`;
                }
            })
        }
        // Axios Get
        async function axiosGet() {
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            // 유효성 검사
            // 태그의 validate 검사해주는 메소드
            console.log(form.name.checkValidity());     // 이름 부분 작성 -> true / 작성 안하면 -> false
            // 하나의 요소에 접근하기 위해 인덱스 작성 (nodeList 형식이기 때문)
            // 같은 name으로 묶인 라디오 버튼은 하나만 선택되더라도 true 반환. 
            console.log('radio1 > ', form.gender[0].checkValidity());
            console.log('radio2 > ', form.gender[1].checkValidity());

            // axios 요청의 결과는 Promise 객체
            // -> then, catch 메서드로 체이닝 가능!
            // -> async await 사용 가능!

            // 1) then, catch + params 사용
            
            axios({
                method: 'get',
                url: '/axios',
                params: data    // 서버로 보낼 데이터

            }).then((response) => {
                // 성공하면 실행될 함수
                console.log(response);          // 서버 응답 결과
                console.log(response.data);     // 여러 정보가 많이 뜨는데 그 중에서 data 값만 뽑아서 보기. // 응답 데이터 확인

                const data = response.data;
                resultBox.textContent = `Get /axios 요청 완료! ${data.name} 님의 성별은 ${data.gender}!`;
            }).catch((error) => {
                console.log('Error!', error);
                resultBox.textContent = `Get /axios 요청 실패! ${error.response.data}`;
            })
            

            // 2) then, catch + 쿼리 스트링 사용 (get)
            /*
            axios({
                method: 'get',
                // get은 url에 데이터 값이 노출! 그걸 이용!
                url: `/axios?name=${data.name}&gender=${data.gender}`
            }).then((response) => {
                console.log(response.data);
                
                const data = response.data;

                resultBox.textContent = `Get /axios 요청 완료! ${data.name} 님의 성별은 ${data.gender}!`;
            })
            */

            // 3) async/await + try-catch (예외처리)
            /*
            try {
                if(!form.name.checkValidity()) { // !false
                    resultBox.textContent = '이름을 입력해주세요.';
                } else if(!form.gender[0].checkValidity()) {
                    resultBox.textContent = '성별을 선택해주세요.';
                } else {
                    // await은 변수 객체로 할당.
                    const response = await axios ({
                        method: 'get',
                        url: '/axios',
                        params: data
                    })  // response : 서버의 응답 결과
                    console.log(response);
                    // 객체 구조분해
                    const { 
                        name, 
                        gender
                    } = response.data;

                    resultBox.textContent = `Get /axios 요청 완료! ${name} 님의 성별은 ${gender}!`;
                }
            } catch(err) {
                console.log('Error!', err);
                resultBox.textContent = '알수 없는 에러 발생!'
            }
            */
            


            // ---------------------------------------- 구 분 선 ------------------------------------------


            // 1차 작성
            // axios({
            //     method: 'get',
            //     url: '/axios',
            //     params: data
            // })
            // async((response) => {
            //     console.log(response.data);     // 여러 정보가 많이 뜨는데 그 중에서 data 값만 뽑아서 보기. // 응답 데이터 확인
            //     const data = response.data;

            //     try {
            //         if(form.name.checkValidity()==true && form.gender.checkValidity()==true) {
            //             resultBox.textContent = `Get /axios 요청 완료! ${data.name} 님의 성별은 ${data.gender}!`;
            //         } else if (form.name.checkValidity()==false && form.gender.checkValidity()==true){ 
            //             resultBox.textContent = `이름을 입력해주세요`
            //         } else if (form.name.checkValidity()==ture && form.gender.checkValidity()==false) {
            //             resultBox.textContent = `성별을 선택해주세요`
            //         } else {
            //             resultBox.textContent = `양식을 작성해주세요`
            //         }

            //         // 폼 유효성 검사
            //         // name 값에 입력값이 없다면, '이름을 입력해주세요'
            //         // gender 값에 입력값이 없다면, '성별을 선택해주세요'
            //         // resultBox에 띄우보기.
            //         // 둘 다 입력이 잘 됐으면, axios 요청을 보내기.
            //     } catch(err) {

            // }
            // })
            

        }
        // Axios Post
        async function axiosPost() {
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value
            };

            // 1) then, catch
            axios({
                method: 'post',
                url: '/axios',
                data: data
            }).then((response) => {
                console.log(response);
                const { 
                    name, 
                    gender
                } = response.data;

                resultBox.textContent = `Get /axios 요청 완료! ${name} 님의 성별은 ${gender}!`;
                }).catch((err) => {
                    console.log(err);
                })
            }
        // Fetch Get
        function fetchGet() {
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            // fetch(url, options)
            fetch(`/fetch?=name=${data.name}&gender=${data.gender}`, {
                method: 'get' // default 값이 get (생략 가능)
            }).then((response) => {
                console.log(response);
                return response.json();
                // 응답 (response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체로 변환.
            }).then((data) => {
                // data 변수 : 직전 then 메서드의 리턴 값 : response.josn();
                console.log('data :', data);
                resultBox.textContent = `Get /fetch 요청 완료! ${data.name}님의 성별은 ${data.gender}!` 
            })
        }
        // Fetch Post
        function fetchPost() {
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }


            // fetch - post 메소드 => options 객체가 반드시 필요함.
            // 1. method: post지정
            // 2. headers: JSON 포맷 사용하겠다고 선언
            // 3. body: 서버로 보낼 데이터를 담아준다.
            fetch('/fetch', {
                method: 'post',
                headers: {
                    'Content-Type' : 'application/json', 
                },
                body: JSON.stringify(data),
                // data: js의 obj 형태인데
                // JSON.stringify(data): obj -> json 형태로 바껴서 서버로 값이 가진다.
            }).then((response) => {
                console.log(response);
                return response.json();     // json() 메서드도 비동기 함수이기 때문에 다음 then에서 값을 받아서 쓸 수 있다. (promise 반환.)
            }).then((data) => {
                console.log('data :', data);
                resultBox.textContent = `Post /fetch 요청 완료! ${data.name}님의 성별은 ${data.gender}! ${data.msg}` 
            }).catch((err) => {
                console.log('Error!', err);
            })
        }





        // 실습 2차 작성
        // async function exec() {
        //             console.log('클릭');
        //         try {
        //             const name = await axiosGet();
        //             console.log(form.name.checkValidity());
        //             const radio = await form.gender.checkValidity()
        //             const form = document.forms['register'];
        //             const data = {
        //                 name: form.name.value,
        //                 gender: form.gender.value
        //             }

        //             if(name1 == true && radio == ture) {
        //                 axios({
        //                     method: 'get',
        //                     url: '/axios',
        //                 })
        //                 const data = response.data;
        //                 resultBox.textContent = `Get /axios 요청 완료! ${data.name} 님의 성별은 ${data.gender}!`;
        //             } else if(name == true && radio == false) {
        //                 resultBox.textContent = '이름을 입력해주세요'
        //             } else if(name == false && radio == true) {
        //                 resultBox.textContent = `성별을 선택해주세요`
        //             } else {
        //                 resultBox.textContent = `양식을 작성해주세요`
        //             }
        //         } catch (error) {
                    
        //         }
        //     }
    </script>
</body>
</html>

<!-- Q1 : 꼭 form.name의 value 값만 가져올 수 있는가.. -->
<!-- Q2 : then(response)의 response는 내가 정하는 변수? promise 배웠던 부분 확인 해보자. -->
<!-- Q3 : 2) 쿼리스트링 -> 노출 -> 보안 취약 -> 데이터 제한 -> 사용하는 이유는?  -> 필요없는 내용을 기재하는 것. 3가지 방법 다 장단점이 있음. -->