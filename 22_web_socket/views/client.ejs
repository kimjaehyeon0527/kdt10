<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Socket 채팅</title>
</head>
<body>
    <h1>채팅</h1>

    <!-- 채팅 내역 -->
    <ul></ul>

    <!-- 채팅 인풋 -->
    <form id="chat">
        이름 <input type="text" id="name">  <br>
        내용 <input type="text" id="message"> <br>
        <button>전송</button>
    </form>

    <script>
        // 클라이언트 소켓 객체
        const socket = new WebSocket('ws://localhost:8000');
        console.log(socket);

        const chatForm = document.getElementById('chat');
        const ul = document.querySelector('ul');

        // open 이벤트
        socket.addEventListener('open', (event) => {
            console.log('[서버 연결 완료]');
        })
        
        // close 이벤트
        socket.addEventListener('close', (event) => {
            console.log('[서버 연결 종료]');
        })

        // error 이벤트
        socket.addEventListener('error', (event) => {
            console.log('[에러 발생] : ', event.console.error);
        })

        // 폼 submit 이벤트
        chatForm.addEventListener('submit', (event) => {
            event.preventDefault(); // 새로고침 안되게 하는 것.

            // input에 입력한 정보를 바탕으로 메세지 데이터 생성
            const msg = chatForm.message.value;
            const name = chatForm.name.value;

            const data = {msg, name};
            // const data = {msg: msg, name: name}; 와 같은 뜻.

            console.log('보내려는 메시지 데이터 >', data);

            // data를 웹 소캣 서버로 전송
            // 웹 소캣 서버가 데이터를 쉽게 처리할 수 있도록
            // (= 웹 소켓 서버가 js 언어를 쓰지 않을 수도 있으니)
            // JSON 형식의 텍스트 데이터로 변환해서 웹 서버로 전송.
            socket.send(JSON.stringify(data));

            // input 초기화
            chatForm.reset();
        })

        // message 이벤트
        socket.addEventListener('message', (event) => {
            console.log('event > ', event);
            const data = JSON.parse(event.data);        // JSON형태 -> 객체 형태로 바꿔준다.
            const { 
                msg,
                name
            } = data;

            const li = document.createElement('li');
            li.textContent = `${name}님 - ${msg}`;
            ul.appendChild(li);
        })
    </script>
</body>
</html>

<!-- Q1. 소켓 클라이언트 객체인데 .send 자체가 서버에 보내는 메소드인가? 아니면 서버에서 쓰면 클라이언트로 / 클라이언트에서 쓰면 서버로 보내는 메소드? -->
<!-- Q2. socket.send(JSON.stringify(data)); 텍스트 데이터로 변환해서 보내는데 왜 버퍼로 찍히는가?  "ws": "^8.15.0" 8버전부터-->
<!-- Q3. 모든 콜백함수(event)가 의미하는 것..? 이벤트가 일어난 후에 진행하기 위함  -->
<!-- Q4. 클라이언트 message 이벤트 리스너의 event는 서버에서 보낸 것. 왜 다시 객체형태로 변환? 구조 분해 할당을 위함? json 형태로 쓰기엔 어렵기 때문에 편하게 쓰기 위해서 -->
<!-- Q5. 핸드셰이크의 발생점? 'connetion' 연결 됐을 때 -->